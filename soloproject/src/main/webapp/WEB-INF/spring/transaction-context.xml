<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                            http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
                            http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
                            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

    <!-- ################################ 선언적 트랜잭션 처리 ################################ -->
    <!-- tx:advice는 Advisor를 생성한다. 실제 트랜잭션의 적용은 AOP를 통해서 이루어진다. -->
    <!-- tx:method 설명
         name : 트랜잭션이 적용될 메서드 이름, * 사용 가능 (get* 은 get으로 시작하는 메서드)
         propagation : 트랜잭션 전파규칙을 설정
         isolation : 트랜잭션 격리레벨
         read-only : 읽기 전용 여부를 설정
         no-rollback-for : 트랜잭션을 롤백하지 않을 예외 타입을 설정
         rollback-for : 트랜잭션을 롤백할 예외 타입을 설정
         timeout : 트랜잭션의 타임아웃 시간을 초단위로 설정
     -->
    <!-- propagation 속성 값 설명
         REQUIRED (기본값) : 메서드를 수행하는데 트랜잭션이 필요하다는 것을 의미
         현재 진행중인 트랜잭션이 존재하면 해당 트랜잭션을 사용, 존재하지 않으면 새로운 트랜잭션 생성.

         MANDATORY : 메서드를 수행하는데 트랜잭션이 필요하다는 것을 의미 하지만, 진행중인 트랜잭션이 없을 경우 예외를 발생시킨다.
         REQUIRES_NEW : 항상 새로운 트랜잭션을 시작. 기존 트랜잭션 일시중지 후 새로운 트랜잭션을 시작
         SUPPORTS : 메서드가 트랜잭션을 필요로 하지는 않지만,  기존 트랜잭션이 존재할 경우 트랜잭션 사용.
         NOT_SUPPORTED : 메소드가 트랜잭션이 필요하지 않음을 의미.
                                                                  트랜잭션이 있을 경우 일시 중지되면 메서드 실행이 종료된 후 트랜잭션 계속 진행한다.
         NEVER : 메서드가 트랜잭션을 필요로 하지 않으며, 트랜잭션이 존재하면 예외를 발생시킨다.
         NESTED : 기존 트랜잭션이 존재하면 기존 트랜잭션에 중첩된 트랜잭션에서 메서드를 실행한다.
                                                기존 트랜잭션이 존재하지 않으면 REQUIRED 와 동일하게 작동한다.
     -->
    <!-- isolation 속성 값 설명
         DEFAULT : 기본 설정을 사용
         READ_UNCOMMITTED : 다른 트랜잭션에 커밋하지 않은 데이터를 읽을 수 있다.
         READ_COMMITTED : 다른 트랜잭션에 의해 커밋된 데이터를 읽을 수 있다.
         REPEATABLE_READ : 처음에 읽어온 데이터와 두번째 읽어온 데이터가 동일한 값을 갖는다.
         SERIALIZABLE : 동일한 데이터에 대해서 동시에 두개이상의 트랜잭션이 수행될 수 없다.
     -->

	<!--  tmsServiceTxManager 가 기본이므로...  -->
    <tx:annotation-driven transaction-manager="tmsServiceTxManager" />
    
	<!-- TMS Service -->
    <bean id="tmsServiceTxManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="tmsServiceDataSource" />
    </bean>

    <tx:advice id="tmsServiceTxAdvice" transaction-manager="tmsServiceTxManager">
        <tx:attributes>
            <tx:method name="select*" read-only="true" />
            <tx:method name="get*" read-only="true" />
            <tx:method name="insert*" propagation="REQUIRED" rollback-for="Exception" />
            <tx:method name="set*" propagation="REQUIRED" rollback-for="Exception" />
            <tx:method name="update*" propagation="REQUIRED" rollback-for="Exception" />
            <tx:method name="delete*" propagation="REQUIRED" rollback-for="Exception" />
        </tx:attributes>
    </tx:advice>

    <!-- public 메서드, 모든 리턴타입, 모든 패키지의 ServiceImpl로 끝나는 모든 메서드에 적용 -->
    <aop:config>
        <aop:pointcut id="tmsServiceRequiredTx" expression="execution(public * com.lge.beconcloud..service.impl.*ServiceImpl.*(..))" />
        <aop:advisor advice-ref="tmsServiceTxAdvice" pointcut-ref="tmsServiceRequiredTx" />
    </aop:config>

    <!-- //////////////////////////////////////////////////////////////////////////////////////// -->
    
    <!--  diagData 연결용  -->
    <!-- import org.springframework.transaction.annotation.Transactional; -->
    <!-- 서비스 인터페이스에서 클래스 상단에 @Transactional(value = "cycleDataTxManager") 추가해서 사용 -->
    <bean id="diagDataTxManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="diagDataDataSource" />
    </bean>

    <tx:advice id="diagDataTxAdvice" transaction-manager="diagDataTxManager">
        <tx:attributes>
            <tx:method name="select*" read-only="true" />
            <tx:method name="get*" read-only="true" />
            <tx:method name="insert*" propagation="REQUIRED" rollback-for="Exception" />
            <tx:method name="set*" propagation="REQUIRED" rollback-for="Exception" />
            <tx:method name="update*" propagation="REQUIRED" rollback-for="Exception" />
            <tx:method name="delete*" propagation="REQUIRED" rollback-for="Exception" />
        </tx:attributes>
    </tx:advice>

    <!-- public 메서드, 모든 리턴타입, 모든 패키지의 ServiceImpl로 끝나는 모든 메서드에 적용 -->    
    <aop:config>
        <aop:pointcut id="diagDataRequiredTx" expression="execution(public * com.lge.beconcloud..service.impl.*ServiceImpl.*(..))" />
        <aop:advisor advice-ref="diagDataTxAdvice" pointcut-ref="diagDataRequiredTx" />
    </aop:config>
    
    <!-- //////////////////////////////////////////////////////////////////////////////////////// -->

    <!-- import org.springframework.transaction.annotation.Transactional; -->
    <!-- 서비스 인터페이스에서 클래스 상단에 @Transactional(value = "tmsWidgetTxManager") 추가해서 사용 -->
    <!-- 현재 사용하지 않기 때문에 막아놈
    <bean id="tmsWidgetTxManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="tmsWidgetLogDataSource" />
    </bean>

    <tx:advice id="tmsWidgetTxAdvice" transaction-manager="tmsWidgetTxManager">
        <tx:attributes>
            <tx:method name="select*" read-only="true" />
            <tx:method name="get*" read-only="true" />
            <tx:method name="insert*" propagation="REQUIRED" rollback-for="Exception" />
            <tx:method name="set*" propagation="REQUIRED" rollback-for="Exception" />
            <tx:method name="update*" propagation="REQUIRED" rollback-for="Exception" />
            <tx:method name="delete*" propagation="REQUIRED" rollback-for="Exception" />
        </tx:attributes>
    </tx:advice>
    -->

    <!-- public 메서드, 모든 리턴타입, 모든 패키지의 ServiceImpl로 끝나는 모든 메서드에 적용 -->
    <!-- 현재 사용하지 않기 때문에 막아놈
    <aop:config>
        <aop:pointcut id="tmsWidgetRequiredTx" expression="execution(public * com.lge.beconcloud..service.impl.*ServiceImpl.*(..))" />
        <aop:advisor advice-ref="tmsWidgetTxAdvice" pointcut-ref="tmsWidgetRequiredTx" />
    </aop:config>
    -->

</beans>